package dialogbuilder;

import org.w3c.dom.*;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.*;

public class XmlBrickToFxml {
    public static void main(String[] args) {
        XmlBrickToFxml instance = new XmlBrickToFxml();

        instance.StartProgram();
    }

    public void StartProgram() {
        /*
        JFrame frame = new JFrame();

        frame.setVisible(true);
        frame.setExtendedState(JFrame.ICONIFIED);
        frame.setExtendedState(JFrame.NORMAL);

        File file = null;

        JFileChooser fc = new JFileChooser();
        if(JFileChooser.APPROVE_OPTION == fc.showOpenDialog(null)){
            frame.setVisible(false);
            file = fc.getSelectedFile();
        }else {
            System.out.println("No file was selected.");
        }

        if (file == null) {
            return;
        }
        */
        //String filepath = file.getAbsolutePath();
        String filepath = "D:\\Desktop\\Flawless Code\\Textsystem_Demo\\Examples\\Calculator\\Taschenrechner.xml";

        try {
            File fXmlFile = new File(filepath);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(fXmlFile);

            Document fxmlDoc = dBuilder.newDocument();

            // doc.getTextContent()

            NodeList variableDefList = doc.getElementsByTagName("VariableDefList");

            NodeList variableNodeList = ((Element)variableDefList.item(0)).getElementsByTagName("VD");
            List<TSVariable> tsVariables = new ArrayList<>();

            for (int i = 0; i < variableNodeList.getLength(); i++) {
                String name = variableNodeList.item(i).getAttributes().getNamedItem("name").getNodeValue();
                String type = variableNodeList.item(i).getAttributes().getNamedItem("type").getNodeValue();

                TSVariable tempVariable = new TSVariable(name, type);

                Node scopeNode = variableNodeList.item(i).getAttributes().getNamedItem("scope");
                if (scopeNode != null) {
                    tempVariable.setScope(true);
                }

                Node isListNode = variableNodeList.item(i).getAttributes().getNamedItem("isList");
                if (isListNode != null) {
                    tempVariable.setList(true);
                }

                tsVariables.add(tempVariable);

                //System.out.println(tempVariable.toString());
            }

            Element tabbedPaneElement = GetSingleElementFromNodeList(doc, "TabbedPane");

            NodeList tempList = tabbedPaneElement.getChildNodes();

            for (int i = 0; i < tempList.getLength(); i++) {
                //System.out.println("NodeList: " + tempList.item(i).getNodeName());
                tempList.item(i);
                if (tempList.item(i).getNodeType() == Node.ELEMENT_NODE) {
                    if (tempList.item(i).getNodeName().equals("Panel")) {
                        TextSystemElements.TSGridPane testGridPane = new TextSystemElements.TSGridPane(tempList.item(i));

                        testGridPane.outputTree("");
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        System.exit(1);
    }

    public static class TSVariable {
        private String name = "null";

        /*
        Types:
        - Numeric
        - Bool
        - String
        - Date
        - Container
         */
        private String type = "null";

        /*
        Scope:
        false => private
        true => public
         */
        private Boolean scope = false;

        /*
        IsList:
        false => single
        true => array
         */
        private Boolean isList = false;

        private String format = "null";
        private String value = "null";

        public TSVariable(String n, String t) {
            name = n;
            type = t;
        }

        @Override
        public String toString() {
            String output = "========TSVariable=======\n";
            output += "Name: " + name + "\n";
            output += "Type: " + type + "\n";
            output += "Scope: " + getScope() + "\n";
            output += "IsList: " + isList + "\n";
            output += "Format: " + format + "\n";
            output += "Value: " + value + "\n";
            output += "=========================\n";

            return output;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getScope() {
            if (!scope) {
                return "Local";
            }
            else {
                return "Global";
            }
        }

        public void setScope(Boolean scope) {
            this.scope = scope;
        }

        public Boolean getList() {
            return isList;
        }

        public void setList(Boolean list) {
            isList = list;
        }

        public String getFormat() { return format; }

        public void setFormat(String format) {
            this.format = format;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }

    private Element GetSingleElementFromNodeList(Document doc, String tagName) {
        NodeList tempNodeList = doc.getElementsByTagName(tagName);

        if (tempNodeList.getLength() > 1) {
            System.out.println("There are MULTIPLE elements in the NodeList.");
            System.exit(0);
        }
        else if (tempNodeList.getLength() == 0) {
            System.out.println("There are NO elements in the NodeList.");
            System.exit(0);
        }

        return (Element)tempNodeList.item(0);
    }
}

